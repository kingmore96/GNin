struct ListNode* deleteDuplicates(struct ListNode* head)
{
    int k = 0;//记录链表里面重复的数字
    struct ListNode* h=malloc(sizeof(struct ListNode)), *y = head ,*t;//h新节点，并且可移动，y指向head，遍历head，*t临时结点存储y->next的值
    struct ListNode* p = h;//p指向h
    
   //y和y的下一个都有的情况下才遍历
   while(y && y->next)
   {
      if(y->val == y->next->val)
      {
         k = y->val;
         while(y && y->val==k) y=y->next; //y是空的时候代表没找到，y不是空代表找到了一个，如果还有下一个结点，需要继续判断
      } 
       else 
       {
         h->next = y;
         t=y->next;
         y->next=NULL;
         h = h->next;
         y = t;
      }
    }
    
  if(y) //y有值，且是最后一个值，包含了找了好久的重复的，找到最后一个y和一直也没有重复的，一直向后找，直到最后一个，这里也是包含了有节点和无节点的情况
   h->next = y;
    
  if(!y) //y是空，包含前面有结点和前面无节点的情况，因为h的变动的，总是指向最近的一个不重复的结点
   h->next = NULL;
    
  return p->next;
}
