/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) 
{
    if(!l1 && l2) return l2;
    if(!l2 && l1) return l1;
    if(!l1 && !l2) return NULL;
    
    struct ListNode *p1,*p2,*nl,*m,*p;//p1 p2 为移动指针，分别指向l1和l2 nl是新的链表结点，m是后续到达最后一位需要进一新建的结点 p为nl的初始位置
    int flag=0;//flag记录是否需要进一
    p1=l1;
    p2=l2;
    nl=(struct ListNode*)malloc(sizeof(struct ListNode));
    nl->next=NULL;
    p=nl;
    
    //只比较计算相同位数的部分
    while(p1 && p2)
    {           
        if(flag==0)
        {
            p1->val=p1->val+p2->val;
            if(p1->val>=10) 
            {
                p1->val=p1->val-10;
                flag=1;
            }
            else flag=0;
            
        }
        
        else if(flag==1)
        {
            p1->val=p1->val+p2->val+1;
            if(p1->val>=10)
            {
                p1->val=p1->val-10;
                flag=1;
            }
            else flag=0;
        }
        
        nl->next=p1;
        nl=nl->next;
        p1=p1->next;
        p2=p2->next;
    }
    
    //两个数位数相同
    if(!p1 && !p2)
    {
        if(flag==1)
        {
            m=(struct ListNode*)malloc(sizeof(struct ListNode));
            m->val=1;
            nl->next=m;
            m->next=NULL;
        }
        else
        {
            nl->next=NULL;
        }
    }
    
    //p2比p1多
    if(!p1 && p2)
    {
        if(flag==0)
            nl->next=p2;
        
        else if(flag==1)
        {
            nl->next=p2;
            p2->val=p2->val+1;
            if(p2->val<10)
                return p->next;
            else 
            {
                p2->val=p2->val-10;
                flag=1;
                while(p2->next && flag==1)
                {
                    p2=p2->next;
                    p2->val=p2->val+1;
                    if(p2->val<10) return p->next;
                    else
                    {
                        p2->val=p2->val-10;
                        flag=1;
                    }
                }
                
                if(!p2->next && flag!=0)
                {
                    m=(struct ListNode*)malloc(sizeof(struct ListNode));
                    m->val=1;
                    m->next=NULL;
                    p2->next=m;   
                }
            }
            
        }
    }
    
    //p1比p2多
      if(!p2 && p1)
    {
        if(flag==0)
            nl->next=p1;
        
        else if(flag==1)
        {
            nl->next=p1;
            p1->val=p1->val+1;
            if(p1->val<10)
                return p->next;
            else 
            {
                p1->val=p1->val-10;
                flag=1;
                while(p1->next && flag==1)
                {
                    p1=p1->next;
                    p1->val=p1->val+1;
                    if(p1->val<10) return p->next;
                    else
                    {
                        p1->val=p1->val-10;
                        flag=1;
                    }
                }
                
                if(!p1->next && flag!=0)
                {
                    m=(struct ListNode*)malloc(sizeof(struct ListNode));
                    m->val=1;
                    m->next=NULL;
                    p1->next=m;   
                }
            }
            
        }
    }
    
    return p->next;
}
